#include <bits/stdc++.h>
using namespace std;

struct disjoint_set{
	vector<int> p;
	disjoint_set(int n): p(n, -1){ }
	bool share(int a, int b){ return root(a) == root(b); }
	int size(int u){ return -p[root(u)]; }
	int root(int u){ return p[u] < 0 ? u : p[u] = root(p[u]); } // O(alpha(n))
	bool merge(int u, int v){
		u = root(u), v = root(v);
		if(u == v) return false;
		if(p[u] > p[v]) swap(u, v);
		p[u] += p[v], p[v] = u;
		return true;
	}
	vector<vector<int>> group_up(){
		vector<vector<int>> g((int)p.size());
		for(auto i = 0; i < (int)p.size(); ++ i) g[root(i)].push_back(i);
		g.erase(remove_if(g.begin(), g.end(), [&](auto &s){ return s.empty(); }), g.end());
		return g;
	}
};

int main(){
	cin.tie(0)->sync_with_stdio(0);
	cin.exceptions(ios::badbit | ios::failbit);
	auto __solve_tc = [&](auto __tc_num)->int{
		int n, m;
		cin >> n >> m;
		vector<string> a(n);
		for(auto &s: a){
			cin >> s;
		}
		disjoint_set dsu(n * m);
		auto ind = [&](int i, int j)->int{
			return i * m + j;
		};
		for(auto i = 0; i < n; ++ i){
			for(auto j = 0; j < m; ){
				while(j < m && a[i][j] == '#'){
					++ j;
				}
				if(j < m){
					int jj = j + 1;
					while(jj < m && a[i][jj] != '#'){
						++ jj;
					}
					for(auto l = j, r = jj - 1; l < r; ++ l, -- r){
						dsu.merge(ind(i, l), ind(i, r));
					}
					j = jj;
				}
			}
		}
		for(auto j = 0; j < m; ++ j){
			for(auto i = 0; i < n; ){
				while(i < n && a[i][j] == '#'){
					++ i;
				}
				if(i < n){
					int ii = i + 1;
					while(ii < n && a[ii][j] != '#'){
						++ ii;
					}
					for(auto l = i, r = ii - 1; l < r; ++ l, -- r){
						dsu.merge(ind(l, j), ind(r, j));
					}
					i = ii;
				}
			}
		}
		int cnt = 0;
		for(auto g: dsu.group_up()){
			char c = '?';
			for(auto t: g){
				auto [i, j] = div(t, m);
				if(a[i][j] != '.'){
					c = a[i][j];
					break;
				}
			}
			if(c != '?'){
				for(auto t: g){
					auto [i, j] = div(t, m);
					if(a[i][j] == '.'){
						++ cnt;
						a[i][j] = c;
					}
				}
			}
		}
		cout << cnt << "\n";
		for(auto s: a){
			cout << s << "\n";
		}
		return 0;
	};
	int __tc_cnt;
	cin >> __tc_cnt;
	for(auto __tc_num = 0; __tc_num < __tc_cnt; ++ __tc_num){
		cout << "Case #" << __tc_num + 1 << ": ";
		__solve_tc(__tc_num);
	}
	return 0;
}

/*

*/

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                   Coded by Aeren                                   //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////