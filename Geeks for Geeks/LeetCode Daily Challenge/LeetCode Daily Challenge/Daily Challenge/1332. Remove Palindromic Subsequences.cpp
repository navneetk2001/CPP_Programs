// You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
// Return the minimum number of steps to make the given string empty.
// A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
// A string is called palindrome if is one that reads the same backward as well as forward.

// Example 1:
// Input: s = "ababa"
// Output: 1
// Explanation: s is already a palindrome, so its entirety can be removed in a single step.

// Example 2:
// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "". 
// Remove palindromic subsequence "a" then "bb".

// Example 3:
// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "". 
// Remove palindromic subsequence "baab" then "b".




//Solution Approach :-
// Intuition : If it's empty sting, return 0; If it's palindrome, return 1; Otherwise, we need at least 2 operation.
// Explanation : We can delete all characters 'a' in the 1st operation, and then all characters 'b' in the 2nd operation. So return 2 in this case

class Solution {
public:
    int removePalindromeSub(string S) {
        if (S == ""){     //if empty, return 0
        	return 0;
        }
        for (int i = 0, j = S.size() - 1; i < j; i++, j--){
            if (S[i] != S[j]){    //if not palindrome, return 2
            	return 2;
            }
        }
        return 1;      //if palindrome, return 1
    }
};